// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostAuthRegisterData, PostAuthRegisterResponses, PostAuthLoginData, PostAuthLoginResponses, GetRandomPokemonData, GetRandomPokemonResponses, GetTestAuthData, GetTestAuthResponses, GetWeatherForecastData, GetWeatherForecastResponses } from './types.gen';
import { zPostAuthRegisterData, zPostAuthLoginData, zGetRandomPokemonData, zGetRandomPokemonResponse, zGetTestAuthData, zGetWeatherForecastData, zGetWeatherForecastResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthRegisterResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostAuthRegisterData.parseAsync(data);
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostAuthLoginResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostAuthLoginData.parseAsync(data);
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getRandomPokemon = <ThrowOnError extends boolean = false>(options?: Options<GetRandomPokemonData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRandomPokemonResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetRandomPokemonData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetRandomPokemonResponse.parseAsync(data);
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/RandomPokemon',
        ...options
    });
};

export const getTestAuth = <ThrowOnError extends boolean = false>(options?: Options<GetTestAuthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTestAuthResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetTestAuthData.parseAsync(data);
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/TestAuth',
        ...options
    });
};

export const getWeatherForecast = <ThrowOnError extends boolean = false>(options?: Options<GetWeatherForecastData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWeatherForecastResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetWeatherForecastData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetWeatherForecastResponse.parseAsync(data);
        },
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/WeatherForecast',
        ...options
    });
};